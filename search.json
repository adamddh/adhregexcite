[{"path":"http://adamddh.me/adhregexcite/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 adhregexcite authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://adamddh.me/adhregexcite/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adam DenHaan. Author, maintainer.","code":""},{"path":"http://adamddh.me/adhregexcite/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"DenHaan (2022). adhregexcite: Example Creating Package Data-303. R package version 0.0.0.9000, http://adamddh./adhregexcite/.","code":"@Manual{,   title = {adhregexcite: Example of Creating a Package for Data-303},   author = {Adam DenHaan},   year = {2022},   note = {R package version 0.0.0.9000},   url = {http://adamddh.me/adhregexcite/}, }"},{"path":"http://adamddh.me/adhregexcite/index.html","id":"adhregexcite","dir":"","previous_headings":"","what":"Example of Creating a Package for Data-303","title":"Example of Creating a Package for Data-303","text":"goal adhregexcite create package scratch.","code":""},{"path":"http://adamddh.me/adhregexcite/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Example of Creating a Package for Data-303","text":"can install development version adhregexcite GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"adamddh/adhregexcite\")"},{"path":"http://adamddh.me/adhregexcite/reference/str_split_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a string — str_split_one","title":"Split a string — str_split_one","text":"Split string","code":""},{"path":"http://adamddh.me/adhregexcite/reference/str_split_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a string — str_split_one","text":"","code":"str_split_one(string, pattern, n = Inf)"},{"path":"http://adamddh.me/adhregexcite/reference/str_split_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a string — str_split_one","text":"string character vector , , one element. pattern Pattern look . default interpretation regular expression, described stringi::stringi-search-regex. Control options regex(). Match fixed string (.e. comparing bytes), using fixed(). fast, approximate. Generally, matching human text, want coll() respects character matching rules specified locale. Match character, word, line sentence boundaries boundary(). empty pattern, \"\", equivalent boundary(\"character\"). n number pieces return.  Default (Inf) uses possible split positions. str_split_fixed, n greater number pieces, result padded empty strings.","code":""},{"path":"http://adamddh.me/adhregexcite/reference/str_split_one.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a string — str_split_one","text":"character vector.","code":""},{"path":"http://adamddh.me/adhregexcite/reference/str_split_one.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a string — str_split_one","text":"","code":"x <- \"alfa,bravo,charlie,delta\" str_split_one(x, pattern = \",\") #> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"   str_split_one(x, pattern = \",\", n = 2) #> [1] \"alfa\"                \"bravo,charlie,delta\"  y <- \"192.168.0.1\" str_split_one(y, pattern = stringr::fixed(\".\")) #> [1] \"192\" \"168\" \"0\"   \"1\""}]
